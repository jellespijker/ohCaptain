//
// Created by peer23peer on 7/15/16.
//

#pragma once

#include <vector>

#include <boost/shared_ptr.hpp>
#include <boost/chrono.hpp>
#include <boost/geometry.hpp>
#include <boost/units/io.hpp>
#include <boost/units/systems/si/io.hpp>
#include <boost/units/systems/angle/degrees.hpp>

//#include "constants.h"
//#include "literals.h"

using namespace boost::units;
//using namespace boost::units::literals;
//using namespace boost::units::constants;

namespace oCpt {
    /*!
     * The World class, this class is an shared pointer where the boatswain can place the state representation of the vessel at a certain time, which allows the captain to plan the strategic decisions
     */
    class World {
    public:
        typedef boost::shared_ptr<World> ptr; //!< Boost shared_ptr to a World class

        /*!
         * The Time class all things time related, which allow for easy consite time manupulation trhough out the classes
         */
        class Time {
        public:
            typedef boost::shared_ptr<Time> ptr; //!< Boost shared_ptr to a Time class
            typedef boost::chrono::steady_clock::period tick_period; //!< a tick period for a steady clock
            typedef boost::chrono::steady_clock clock_t; //<! A steady clock taking time from the OS
            typedef boost::chrono::time_point<clock_t> timepoint_t; //<! A point in time generated by a steady clock
        private:
            clock_t timeClock_; //<! The steady clock
        public:
            /*!
             * Constructor of the Time class
             */
            Time();

            /*!
             * Deconstructor of the Time class
             */
            virtual ~Time();

            /*!
             * A template class to Log generic values at an certain epoch in time
             * @tparam T Type of value to log
             */
            template<typename T>
            class Log {
            public:
                typedef boost::shared_ptr<Log> ptr; //<! A Boost shared pointer to a Log class
            private:
                timepoint_t _epoch; //<! An point in in type
                T _value; //<! The Value to be stored
            public:

                /*!
                 * Constructor of the Log class
                 */
                Log() {}

                /*!
                 * Constructor of the Log class
                 * @param value The Value to store
                 * @param epoch the Time point, with a default to the now moment
                 */
                Log(const T &value, const timepoint_t &epoch = clock_t::now()) {
                    this->_value = value;
                    this->_epoch = epoch;
                }

                /*!
                 * Deconstructor of the Log class
                 */
                virtual ~Log() {}

                /*!
                 * Get the current Epoch
                 * @return returns a time point when the Log has taken place
                 */
                const timepoint_t &getEpoch() const {
                    return _epoch;
                }

                /*!
                 * Gets the current value
                 * @return returns the value at an certain time
                 */
                const T &getValue() const {
                    return _value;
                }
            };

            template<typename T>
            using History = std::vector<boost::shared_ptr<Log<T>>>; //<! A vector of Log items

            /*!
             * get the current TimeClock
             * @return returns the time clock
             */
            clock_t &getTimeClock();

            /*!
             * Get the current time, as in now
             * @return returns a timepoint_t which is now
             */
            timepoint_t now();
        };

        /*!
         * A location in the World
         */
        class Location {
        public:
            typedef quantity<boost::units::degree::plane_angle, double> degree_t;

            enum cardinal_direction {
                North = 110, /**< enum value North */
                South = 115, /**< enum value South */
                East = 101, /**< enum value East */
                West = 119 /**< enum value West */
            }; //<! The cardinal direction of a hemisphere

            typedef struct coordinate {
                degree_t value; //<! number of degrees
                cardinal_direction direction; //<! Direction
            } coordinate_t; //<! A coordinate value type, consiting of a number and a cardianal direction

            typedef struct gpsPoint {
                coordinate_t longitude; //<! The longitude of a GPS coordinate
                coordinate_t latitude; //<! The latitude of a GPS coordinate
                double height; //<! The height of location

                /*!
                 * Convert a gps coordinate to a text string
                 * @return a text string eq. 5.000E,52.000N
                 */
                std::string toString();
            } gpsPoint_t; //<! A GPS point consiting of longtitude, latitude and height value

            typedef boost::shared_ptr<Location> ptr; //<! Boost shared_ptr to a Location

            struct RoutePoint {
                typedef boost::shared_ptr<RoutePoint> ptr; //<! Boost shared_ptr to a Routepoint
                Time::timepoint_t TimePoint; //<! A point in time when this waypoint should or has been reached
                gpsPoint_t Location; //<! A GPS location of the waypoint
            }; //<! A way point on a route

            /*!
             * Constructor for the Location
             */
            Location();

            /*!
             * Deconstruction for the Location
             */
            virtual ~Location();

            /*!
             * get the current Location
             * @param newMeasurement should a new measurement be executed? or is the lattest log sufficient
             * @return returns the last Way point
             */
            RoutePoint::ptr getCurrentLocation(bool newMeasurement = false);

            /*!
             * Add a new waypoint to the history log
             * @param routePoint a waypoint
             */
            void push_back(RoutePoint::ptr routePoint);

            /*!
             * Get the complete location history
             * @return returns a vector with shared_ptr of all waypoints reached
             */
            std::vector<RoutePoint::ptr> getLocationHistory();

            /*!
             * Convert a string to a cardinal direction
             * @param str North/north/N/n / West,west,W,w / South,south,S,s / East,east,E,e are taken as argument
             * @return a cardinal direction
             */
            static cardinal_direction stocd(std::string str);

        private:
            RoutePoint::ptr currentLocation_; //<! a pointer to the last location
            std::vector<RoutePoint::ptr> LocationHistory; //<! The location history
        };


        /*!
         * Constructor for a World
         */
        World();

        /*!
         * Deconstuctor for a World
         */
        virtual ~World();

        /*!
         * get the current time object
         * @return returns Time
         */
        Time &getTime();

        /*!
         * Get the current Epoch
         * @return returns a timepoint representing now
         */
        Time::timepoint_t now();

    protected:
        Time time_; //<! The time object

    };


}
